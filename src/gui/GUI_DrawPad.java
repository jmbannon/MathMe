/*
 * MathMe is an educational program created by Jesse Bannon for 
 * TCSS 305 at University of Washington Tacoma (Fall Quarter 2014). 
 *
 * It is open source and can be modified, changed, and used in
 * any way so long as Jesse Bannon and MathMe is referenced.
 */
package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import tools.DrawPad_Main;
import class_resources.ColorIcon;
import class_resources.GetImage;

/**
 * @author Jesse Bannon
 * @version 1.0
 * 
 * DrawPad graphical user interface.
 */
public class GUI_DrawPad extends javax.swing.JFrame {
    
    private static boolean IS_OPEN = false; 
    
    private final DrawPad_Main drawPad = new DrawPad_Main();
    
    private final FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG & PNG Images", "jpg", "png");
    
    private Color brushColor = Color.black;        
    Container container = this.getContentPane();
    

    /**
     * Creates new form TestDraw
     */
    public GUI_DrawPad() {
        initComponents();
        container.setBounds(0, 0, getSize().width, getSize().height);
        container.add(drawPad, BorderLayout.CENTER);
        jFileChooser1.setFileFilter(filter);
    }
    
    public static boolean isOpen() {
        return IS_OPEN;
    }
    
    private void updateColorIcons() {
        ColorItem.setIcon(new ColorIcon(brushColor));
        ColorButton.setIcon(new ColorIcon(brushColor));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        ToolbarPanel = new javax.swing.JPanel();
        ColorButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenItem = new javax.swing.JMenuItem();
        ClearItem = new javax.swing.JMenuItem();
        ExitItem = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        ViewMenu = new javax.swing.JMenu();
        ToolbarCheckBoxItem = new javax.swing.JCheckBoxMenuItem();
        BrushMenu = new javax.swing.JMenu();
        ColorItem = new javax.swing.JMenuItem();

        jToggleButton1.setText("jToggleButton1");

        jFileChooser1.setDialogTitle("Open Image");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Draw Pad");
        setIconImage(GetImage.returnImage("MATHME_ICON.png"));
        setMinimumSize(new java.awt.Dimension(300, 200));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        ToolbarPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        ColorButton.setIcon(new ColorIcon(brushColor));
        ColorButton.setText("Color");
        ColorButton.setFocusable(false);
        ColorButton.setPreferredSize(new java.awt.Dimension(76, 22));
        ColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorButtonActionPerformed(evt);
            }
        });
        ToolbarPanel.add(ColorButton);

        getContentPane().add(ToolbarPanel, java.awt.BorderLayout.PAGE_END);

        jMenuBar1.setMinimumSize(new java.awt.Dimension(95, 21));

        FileMenu.setText("File");

        OpenItem.setText("Open");
        OpenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenItemActionPerformed(evt);
            }
        });
        FileMenu.add(OpenItem);

        ClearItem.setText("Clear");
        ClearItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearItemActionPerformed(evt);
            }
        });
        FileMenu.add(ClearItem);

        ExitItem.setText("Exit");
        FileMenu.add(ExitItem);

        jMenuBar1.add(FileMenu);

        EditMenu.setText("Edit");
        EditMenu.setMinimumSize(new java.awt.Dimension(300, 200));
        jMenuBar1.add(EditMenu);

        ViewMenu.setText("View");

        ToolbarCheckBoxItem.setSelected(true);
        ToolbarCheckBoxItem.setText("Toolbar");
        ToolbarCheckBoxItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToolbarCheckBoxItemActionPerformed(evt);
            }
        });
        ViewMenu.add(ToolbarCheckBoxItem);

        jMenuBar1.add(ViewMenu);

        BrushMenu.setText("Brush");
        BrushMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrushMenuActionPerformed(evt);
            }
        });

        ColorItem.setIcon(new ColorIcon(brushColor));
        ColorItem.setText("Color");
        ColorItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorItemActionPerformed(evt);
            }
        });
        BrushMenu.add(ColorItem);

        jMenuBar1.add(BrushMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrushMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrushMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BrushMenuActionPerformed

    private void ColorItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorItemActionPerformed
        brushColor = JColorChooser.showDialog(this, "Select a brush color", Color.black);
        drawPad.setColor(brushColor);
        updateColorIcons();
    }//GEN-LAST:event_ColorItemActionPerformed

    private void ClearItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearItemActionPerformed
        drawPad.clear();
    }//GEN-LAST:event_ClearItemActionPerformed

    private void ColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorButtonActionPerformed
        brushColor = JColorChooser.showDialog(this, "Select a brush color", Color.black);
        drawPad.setColor(brushColor);
        updateColorIcons();
    }//GEN-LAST:event_ColorButtonActionPerformed

    private void ToolbarCheckBoxItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToolbarCheckBoxItemActionPerformed
        if (ToolbarCheckBoxItem.isSelected()) {
            ToolbarPanel.setVisible(true);
        } else {
            ToolbarPanel.setVisible(false);
        }
    }//GEN-LAST:event_ToolbarCheckBoxItemActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        IS_OPEN = true;
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        IS_OPEN = false;
    }//GEN-LAST:event_formWindowClosed

    private void OpenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenItemActionPerformed
        if (jFileChooser1.showOpenDialog(this) == jFileChooser1.APPROVE_OPTION) {
            final String fileName = jFileChooser1.getSelectedFile().getName();
            if (fileName.endsWith(".jpg") || fileName.endsWith(".png")) {
                try {
                    drawPad.setImage(jFileChooser1.getSelectedFile());
                } catch (IOException ex) {
                    Logger.getLogger(GUI_DrawPad.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }//GEN-LAST:event_OpenItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_DrawPad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_DrawPad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_DrawPad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_DrawPad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_DrawPad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu BrushMenu;
    private javax.swing.JMenuItem ClearItem;
    private javax.swing.JButton ColorButton;
    private javax.swing.JMenuItem ColorItem;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem ExitItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem OpenItem;
    private javax.swing.JCheckBoxMenuItem ToolbarCheckBoxItem;
    private javax.swing.JPanel ToolbarPanel;
    private javax.swing.JMenu ViewMenu;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
